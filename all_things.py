# Простые функции для преобразования переменных

a = "1.0"  # "1.0" - строка
a = float(a)  # 1.0 - рациональное число
a = bool(a)  # True - булевое значение
a = int(a)  # 1 - целое число

aa = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
aa = aa[:9]  # срез цикла до элемента с индексом 9
aa = aa[0:]  # срез цикла с элемента с индексом 0
aa = aa[0:9]  # срез цикла от элемента с индексом 0 до элемента с индексом 9
aa = aa[::-1]  # разворачивание цикла
aa = aa[0:9:1]  # от минимального элемента к максимальному с интервалом

# СТРОКИ - ЭТО СПИСКИ ДЛЯ КОМПЬЮТЕРА, С НИМИ МОЖНО РАБОТАТЬ ТАКЖЕ

# условный оператор, проверяем какие-то условия
if a == 1:  # пишем само условие
    pass
elif a == 0:  # если есть другой определенный случай, пишем сюда
    pass
else:  # если ничего не подходит, выполняем самое последнее
    pass

# цикл с а кол-вом итераций
for i in range(0, a, 1):  # минимальное число -> максимальное число +1 -> интервал между значениями
    pass  # 1 итерация

# бесконечный цикл, которые выполняется, пока не выполнится условие
while a >= 1:  # вместо if тут while - цикл будет идти, пока условие не выполнится
    pass  # также 1 итерация


# функция
def find_b(b: int) -> int:  # функция принимает изначально 1 параметр (желательно) int и возвращает int
    return b  # просто возвращает значение


n = input()  # принимаем значение от пользователя
print(find_b(n))  # выводим результат функции, используя параметр, введеный до этого нами (кстати меняет str n на int n)


# рекурсия - функция вызывает саму себя
def small_c(c: int) -> int:
    if c == 0:  # делаем if, чтобы функция хоть когда-то закончилась
        return 1  # возвращаем нужное нам значение

    c -= 1  # делаем какие-то действия
    return small_c(c)  # функция вызывает саму себя (параметр уже изменен)


try:  # ловим ошибку
    print(1 / 0)  # пишем код, где мы ждем ошибку
except ZeroDivisionError:  # если мы поймали ошибку, то сначала узнаем какую именно
    # (иначе ошибка может повториться дальше, если мы ее не ждем)

    pass  # делаем что-то после поимки ошибки


# класс с любыми параметрами
class Animal:
    def __init__(self, color, voice):  # стандартная функция для классов, где хранятся все данные об объекте
        self.color = color  # какие-то параметры, нужные для будущего
        self.voice = voice


# подкласс, имеющий доп. параметры
class Tiger (Animal):
    def attack(self):  # init не нужен, он уже есть у Animal
        pass  # выполняем что-то для этой функции

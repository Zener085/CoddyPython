a = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]  # список
a = list(i for i in range(1, 11))  # такой же список, но с использованием функций list() - преобразует данные в список

# Списки можно срезать - отделять от них части
print(a[:9])  # [1, 2, 3, 4, 5, 6, 7, 8, 9]
print(a[1:])  # [2, 3, 4, 5, 6, 7, 8, 9, 10]
print(a[2:8])  # [3, 4, 5, 6, 7, 8]
print(a[::-1])  # [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]
print(a[1:8:2])  # [2, 4, 6, 8]

# строки работают так же, как и списки - можно использовать все, что есть у списков
print("Привет это надо стереть"[:6])  # Выпишется только "Привет" - срез строки

# из списков можно создавать матрицы - списки в списке
matrix = [[0]*10] * 10  # матрица 10 на 10, заполненная нулями
multiply_table = list(list(i * j for i in range(1, 11)) for j in range(1, 11))  # таблица умножения - матрица

# словарь - список, где индексы вводятся самостоятельно
aa = {1: 0, 2: 'a', 5: 'g', 'a': 4}
print(aa['a'])  # выпишется 5

# Кортеж - список, где только уникальные значения. Кортеж нельзя изменить и в него нельзя ничего добавить
aaa = {1, 2, 3, 4, 5}
aaa = set(i for i in range(1, 6))
# кортеж хранит только уникальные значения, элементы не повторяются
# список может быть [1, 2, 3, 3, 3], а такой же кортеж {1, 2, 3}
# также с кортежам почти ничего нельзя сделать

# множество - список, в котором нельзя изменить значения
aaaa = (1, 2, 3, 4, 5, 6)
aaaa = tuple(i for i in range(1, 7))
# Множество может иметь дубликаты, но как и кортеж, не может изменяться

# у массивов в Python работает reference - если изменить копию списка, то оригинальный список тоже изменится
b = a  # делаем копию списка
b[0] += 1  # увеличиваем первый элемент на 1
print(a, b)  # первый элемент увеличился у обоих списков на 1, хотя увеличивали только у одного
# См. что такое reference (индусы на Youtube в помощь)

# Списки могут выполнять несколько новых команд
# Тут есть список команд, которые можно совершать со списками
a.append(5)  # добавляем в конец списка значение 5
a.pop(0)  # удаляем первый элемент списка
a.remove(5)  # удаляем первую попавшуюся значение 5 (если их не будет в списке, будет ошибка)
a.count(5)  # считает кол-во элементов со значением 5
a.index(5)  # выведет номер элемента со значением 5
a.sort()  # сортирует список
a.reverse()  # аналог a[::-1]
a.clear()  # удаляет все элементы из списка
print(len(a))  # выводит кол-во элементов в списке
print(sum(a))  # выводит сумму всех элементов в списке
print(max(a))  # или min(a) - выводит максимальное/минимальное значение из списка
# некоторые команды работают также со словарями, кортежами и множествами, это можно протестировать
